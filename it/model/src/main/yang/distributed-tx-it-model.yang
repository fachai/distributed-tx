module distributed-tx-it-model{
        yang-version 1;
        namespace "urn:opendaylight:params:xml:ns:yang:distributed-tx:it:model";
        prefix "distributed-tx-it-model";

        revision "2015-01-05" {
                description "Initial revision of distributed-tx-it model";
        }
        rpc naive-test {
                input {
                        leaf name {
                                type string;
                        }
                        leaf rollback{
                                type boolean;
                                default false;
                        }
                        leaf numberofinterfaces{
                                type int32;
                                default 1;
                        }
                }
                output {
                        leaf result{
                                type string;
                        }
                }
        }

        rpc ds-naive-test {
                input {
                        leaf name {
                                type string;
                        }
                        leaf rollback{
                                type boolean;
                                default false;
                        }
                        leaf numberofinterfaces{
                                type int32;
                                default 1;
                        }
                }
                output {
                        leaf result{
                                type string;
                        }
                }
        }

        rpc mixed-naive-test {
                input {
                        leaf name {
                                type string;
                        }
                        leaf rollback{
                                type boolean;
                                default false;
                        }
                }
                output {
                        leaf result{
                                type string;
                        }
                }
        }

	    container ds-naive-test-data{
		    list ds-naive-test-data-entry {
			    key "name";
			    leaf name {
				    type string;
			    }
			    leaf value{
				    type string;
			    }
		    }
	    }

	    container ds-naive-rollback-data{
		    list ds-naive-rollback-data-entry {
			    key "name";
			    leaf name {
				    type string;
			    }
		    }
	    }

        container datastore-test-data {
            config true;
            list outer-list {
                key id;
                leaf id {
                   type int32;
                }
                list inner-list {
                   key name;
                   leaf name {
                      type int32;
                   }
                   leaf value {
                      type string;
                   }
                }
            }
        }

        container test-status {
                leaf execStatus {
                    type enumeration {
                        enum "idle" {
                            value 1;
                        }
                        enum "executing" {
                            value 2;
                        }
                    }
                    config false;
                    mandatory true;
                    description
                        "Indicates whether a test run is in progress; only one test can run at a time";
                }
        }

	    rpc benchmark-test {
                  input {
                      leaf logicalTxType {
                         mandatory true;
                         type enumeration {
                            enum "DATASTORE" {
                                 value 1;
                                 description
                                    "operations on datastore nodes";
                            }
                            enum "NETCONF" {
                                 value 2;
                                 description
                                    "operations on netconf nodes";
                            }
                         }
                      }
                      leaf loop {
                          type uint32;
                          default 500000;
                          description
                             "The times of the test";
                      }
                      leaf operation {
                           type enumeration {
                              enum "PUT" {
                                 value 1;
                                 description
                                    "The put operation";
                              }
                              enum "MERGE" {
                                 value 2;
                                 description
                                    "The merge operation";
                              }
                              enum "DELETE" {
                                 value 3;
                                 description
                                    "delete the item stored in the datastore";
                              }
                           }
                           description
                               "Type of the transaction operation to benchmark";
                      }
                      leaf putsPerTx {
                           type uint32;
                           default 1;
                           description
                                "Number of write operations (PUT, MERGE, or DELETE) per transaction submit";
                      }
                      leaf outerList {
                           type int32;
                           default 1000;
                           description
                                "Size of outerList";
                      }
                      leaf innerList {
                           type int32;
                           default 1000;
                           description
                               "Size of innerList";
                      }
                  }
                  output {
                      leaf status {
                           mandatory true;
                           type enumeration {
                              enum "OK" {
                                  value 1;
                              }
                              enum "FAILED" {
                                  value 2;
                              }
                              enum "TEST-IN-PROGRESS" {
                                  value 3;
                              }
                           }
                           description
                               "Indicates whether the test finished successfully";
                      }
                      leaf execTime {
                           type uint32;
                           default 1;
                           description
                              "The time it took to execute all the transaction via databroker or netconf";
                      }
                      leaf dtxSyncExecTime {
                           type uint32;
                           default 1;
                           description
                              "The time it took to synchronously execute all the transaction via dtx";
                      }
                      leaf dtxAsyncExecTime {
                           type uint32;
                           default 1;
                           description
                              "The time it took to asynchronously execute all the transaction via dtx";
                      }
                      leaf dbOk {
                           type uint32;
                           default 0;
                           description
                              "The number of successful databroker tests";
                      }
                      leaf dTxSyncOk {
                           type uint32;
                           default 0;
                           description
                              "The number of successful dtx sync tests ";
                      }
                      leaf dTxAyncOk {
                           type uint32;
                           default 0;
                           description
                              "The number of successful dtx async tests ";
                      }
                  }
          }
}


